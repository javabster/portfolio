{"version":3,"sources":["fonts/Aldrich/Aldrich-Regular.ttf","images/profile.png","components/app/Wrapper.jsx","components/app/MobileWrapper.jsx","components/shared/Button.jsx","components/nav-bar/ButtonRow.jsx","actions/applicationActions.js","components/nav-bar/NavBar.jsx","components/nav-bar/ButtonColumn.jsx","components/nav-bar/ThemeButtons.jsx","components/body/Body.jsx","components/body/AboutBody.jsx","components/shared/Tile.jsx","components/body/BlogsBody.jsx","components/body/TalksBody.jsx","reducers/applicationReducer.js","utils/backendApi.js","styles/themes.js","components/app/App.js","utils/utils.js","serviceWorker.js","index.js"],"names":["module","exports","styled","div","props","theme","background","button","type","tileBtn","clicked","btnMain","accent","setTheme","setTabOpen","tab","setLanguage","lang","language","setAbout","res","data","setButtons","setTalks","setBlogs","NavBar","useContext","AppContext","state","dispatch","ButtonRow","className","Button","tabOpen","onClick","actions","about","title","blogs","talks","right","ThemeButtons","ButtonColumn","mode","buttons","lightTitle","darkTitle","color","bodyMain","AboutBody","useState","socialColour","setSocialColour","useEffect","style","display","gridTemplateColumns","flexDirection","justifyContent","Body","padding","height","width","objectFit","src","require","gridTemplateRows","alignItems","paddingLeft","paddingRight","fontSize","lineHeight","heading","bgColor","url","target","data-testid","description","Tile","content","buttonText","Date","published","toLocaleDateString","year","month","day","window","open","link","BlogsBody","textAlign","margin","flexWrap","blogsList","map","blog","idx","key","TalksBody","talksList","talk","defaultState","modalOpen","applicationReducer","action","axios","baseURL","getData","method","response","console","log","message","getButtonDetails","lightTheme","font","bar","innerBar","bubble","diamond","timelineShadow","darkTheme","createContext","App","useReducer","isMobile","setIsMobile","setBody","aboutRes","buttonRes","talksRes","blogsRes","fetchData","mobile","parseInt","document","body","clientWidth","Provider","value","MobileWrapper","marginTop","Wrapper","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.74f4e0a1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Aldrich-Regular.d95d3c03.ttf\";","module.exports = __webpack_public_path__ + \"static/media/profile.ac7a8fd6.png\";","import styled from 'styled-components';\n\nexport default styled.div`\n    background-color: ${props => props.theme.background};\n    min-height: 100vh;\n    margin-top: 0;\n    padding: 20px;\n    width: 100vw;\n    box-sizing: border-box;\n`;","import styled from 'styled-components';\n\nexport default styled.div`\n    background-color: ${props => props.theme.background};\n    min-height: 100vh;\n    margin-top: 0;\n    padding: 20px;\n    display: flex;\n    flex-direction: column;\n    width: 100vw;\n    box-sizing: border-box;\n`;","import styled from 'styled-components';\n\nexport default styled.button`\n    background-color: ${props => {\n    if (props.type === 'tile') return props.theme.tileBtn;\n    else if (props.clicked === false) return props.theme.btnMain;\n    else if (props.clicked === true) return props.theme.accent;\n  }\n  };\n    margin: 10px;\n    min-height: ${props => {\n    if (props.type === 'small') return '30px';\n    else return '40px';\n  }\n  };\n    \n    height: ${props => {\n    if (props.type === 'small') return '10px';\n    else return '50px';\n  }\n  };\n    min-width: ${props => {\n    if (props.type === 'small') return '20px';\n    else return '100px';\n  }\n  };\n    padding: ${props => {\n    if (props.type === 'small') return '0 0 0 0';\n    else return '0 20px 0 20px';\n  }\n  };\n    font-size: ${props => {\n    if (props.type === 'small') return '0.70rem';\n    else return '1rem';\n  }\n  };\n    border: none;\n    font-family: 'Aldrich';\n    color: ${props => {\n    if (props.type === 'tile') return 'white';\n    if (props.clicked === false) return props.theme.accent;\n    else if (props.clicked === true) return props.theme.background;\n  }\n  };\n    text-align: center;\n\n    /* font-weight: bold; */\n\n    box-shadow: ${props => {\n    if (props.clicked === false) return `5px 5px 0px ${props.theme.accent};`\n    else if (props.clicked === true) return `3px 3px 0px ${props.theme.btnMain}`;\n  }\n  };\n    /* box-shadow: [horizontal offset] [vertical offset] [blur radius] [optional spread radius] [color]; */\n\n    transform: ${props => {\n    if (props.clicked === false) return 'translate(0em,-0.2em)';\n  }\n  };\n\n    /* &:hover { */\n    /* //border-image-slice: 1; */\n    /* background-color: #DFE4FB; */\n    /* background-size: 90%;\n    transform: translate(0.5em,-0.5em);\n    border: none; */\n\n    @font-face {\n    font-family: 'Aldrich';\n    src: local('Aldrich'), url(../../fonts/Aldrich/Aldrich-Regular.ttf) format('truetype');\n    }\n\n    &:focus {\n    outline: none;\n    }\n\n`","import styled from 'styled-components';\n\nexport default styled.div`\n    grid-column-start: 2;\n    grid-column-end: 2;\n    grid-row-start:1;\n    grid-row-end: 1;\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    min-height: 100px;\n    width:100%;\n    padding-top: 20px;\n`","export const setTheme = (theme) => {\n    return {\n        type: setTheme,\n        theme: theme\n    }\n}\n\nexport const setTabOpen = (tab) => {\n    return {\n        type: setTabOpen,\n        tab: tab\n    }\n}\n\nexport const setLanguage = (lang) => {\n    return {\n        type: setLanguage,\n        language: lang\n    }\n}\n\nexport const setAbout = (res) => {\n    return {\n        type: setAbout,\n        data: res\n    }\n}\n\nexport const setButtons = (res) => {\n    return {\n        type: setButtons,\n        data: res\n    }\n}\n\nexport const setTalks = (res) => {\n    return {\n        type: setTalks,\n        data: res\n    }\n}\n\nexport const setBlogs = (res) => {\n    return {\n        type: setBlogs,\n        data: res\n    }\n}\n","import React, { useContext } from 'react';\nimport Button from '../shared/Button';\nimport ButtonRow from './ButtonRow';\n\nimport { AppContext } from '../app/App';\nimport * as actions from '../../actions/applicationActions';\n\nexport default function NavBar(props) {\n  const { state, dispatch } = useContext(AppContext);\n\n  return (\n    <ButtonRow className='nav-bar-row'>\n      <Button\n        type='nav-bar'\n        clicked={state.tabOpen === 'about'}\n        onClick={() => { dispatch(actions.setTabOpen('about')); }}>\n        {state.about.title}\n      </Button>\n      <Button\n        type='nav-bar'\n        clicked={state.tabOpen === 'blogs'}\n        onClick={() => { dispatch(actions.setTabOpen('blogs')); }}>\n        {state.blogs.title}\n      </Button>\n      <Button\n        type='nav-bar'\n        clicked={state.tabOpen === 'talks'}\n        onClick={() => { dispatch(actions.setTabOpen('talks')); }}>\n        {state.talks.title}\n      </Button>\n    </ButtonRow>\n  )\n};\n","import styled from 'styled-components';\n\nexport default styled.div`\n    grid-column-start: ${props => props.right ? 3 : 1};\n    grid-row-start: 1;\n    display: flex;\n    flex-direction: column;\n    height: 50%;\n    width:100px;\n`","import React, {useContext} from 'react';\nimport ButtonColumn from './ButtonColumn';\nimport Button from '../shared/Button';\nimport { AppContext } from '../app/App';\nimport * as actions from '../../actions/applicationActions';\n\nexport default function ThemeButtons(props) {\n    const {state, dispatch} = useContext(AppContext);\n\n    return(\n        <ButtonColumn >\n        <Button \n          type='small'\n          clicked={state.mode === 'light'} \n          onClick={() => dispatch(actions.setTheme('light'))}>\n            {state.buttons.lightTitle}\n        </Button>\n        <Button \n          type='small' \n          clicked={state.mode === 'dark'} \n          onClick={() => dispatch(actions.setTheme('dark'))}>\n            {state.buttons.darkTitle}\n        </Button>\n      </ButtonColumn>\n    )\n}","import styled from 'styled-components';\n\nexport default styled.div`\n    min-height: 100px;\n    height: auto;\n    padding: 25px;\n    color: ${props => props.theme.color};\n    margin: 20px;\n    background-color: ${props => props.theme.bodyMain\n    };\n    box-shadow: ${props => `5px 5px 0px ${props.theme.accent};\n    text-align: center;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly`\n    };\n\n`","import React, { useState, useContext, useEffect } from 'react';\nimport { AppContext } from '../app/App';\nimport { SocialIcon } from 'react-social-icons';\nimport './AboutBody.scss';\nimport Body from './Body';\n\nexport default function AboutBody(props) {\n    const { state } = useContext(AppContext);\n    const [socialColour, setSocialColour] = useState('#8093F1')\n\n    useEffect(() => {\n        (state.mode === 'light') ? setSocialColour('#8093F1') : setSocialColour('#DFE4FB')\n    }, [state.mode])\n\n    return (\n        <div style={{ display: 'inline-grid', gridTemplateColumns: '1.5fr 3fr' }}>\n            <div style={{ display: 'flex', flexDirection: 'column', justifyContent: 'space-evenly' }}>\n                <Body style={{ padding: '0' }}>\n                    <img style={{ height: '100%', width: '100%', objectFit: 'cover' }} src={require('../../images/profile.png')} />\n                </Body>\n            </div>\n            <div style={{ display: 'inline-grid', gridTemplateRows: '1.5fr 3fr', alignItems: 'center' }}>\n                <div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-evenly', alignItems: 'center', width: '100%' }}>\n                    <Body style={{ paddingLeft: '50px', paddingRight: '50px', height: '100%' }}>\n                        <h1 style={{ fontSize: '50px', lineHeight: '55px' }}>{state.about.heading}</h1>\n                    </Body>\n                    <Body style={{ flexDirection: 'row', justifyContent: 'space-around', alignItems: 'center', width: '30%', height: '100%' }}>\n                        <SocialIcon bgColor={socialColour} url='https://www.linkedin.com/in/abby-mitchell/' target=\"_blank\"></SocialIcon>\n                        <SocialIcon data-testid='github-link' bgColor={socialColour} url='https://github.com/javabster' target=\"_blank\"></SocialIcon>\n                        <SocialIcon bgColor={socialColour} url='https://twitter.com/javabster' target=\"_blank\"></SocialIcon>\n                    </Body>\n                </div>\n                <Body style={{ fontSize: 'x-large', padding: '50px', height: '70%' }}>\n                    {state.about.description}\n                </Body>\n            </div>\n        </div >\n    )\n}","import React from 'react';\nimport Body from '../body/Body';\nimport Button from './Button';\n\nexport default function Tile(props) {\n    const { content, buttonText, width } = props;\n\n    return (\n        <Body style={{ width: width }}>\n            <h2>{content.title}</h2>\n            <h3>{new Date(content.published).toLocaleDateString('en-GB', { year: 'numeric', month: 'long', day: 'numeric' })}</h3>\n            <Button type='tile'\n                clicked={false}\n                onClick={() => { window.open(content.link, '_blank', 'noopener,noreferrer') }}>\n                {buttonText}\n            </Button>\n        </Body>\n    )\n}","import React, { useContext } from 'react';\nimport { AppContext } from '../app/App';\nimport Tile from '../shared/Tile';\n\nexport default function BlogsBody(props) {\n    const { state } = useContext(AppContext);\n\n    return (\n        <div>\n            <h1 style={{ textAlign: 'center', margin: '20px' }}>Articles (first author)</h1>\n            <div style={{\n                display: 'flex',\n                flexDirection: 'row',\n                justifyContent: 'space-evenly',\n                flexWrap: 'wrap'\n            }}>\n                {state.blogs.blogsList.map((blog, idx) => {\n                    if (blog.type == 'author') {\n                        return <Tile content={blog} buttonText='Read Me!' key={idx} width='25%'></Tile>\n                    }\n                })}\n            </div>\n            <h1 style={{ textAlign: 'center', margin: '50px' }}>Other Articles (co-author/editor)</h1>\n            <div style={{\n                display: 'flex',\n                flexDirection: 'row',\n                justifyContent: 'space-evenly',\n                flexWrap: 'wrap'\n            }}>\n                {state.blogs.blogsList.map((blog, idx) => {\n                    if (blog.type != 'author') {\n                        return <Tile content={blog} buttonText='Read Me!' key={idx} width='25%'></Tile>\n                    }\n                })}\n            </div>\n        </div >\n    )\n}","import React, { useContext } from 'react';\nimport { AppContext } from '../app/App';\n\nimport Tile from '../shared/Tile'\nimport Body from '../body/Body'\n\nexport default function TalksBody(props) {\n    const { state } = useContext(AppContext);\n\n    return (\n        <div>\n            <h1 style={{ textAlign: 'center', margin: '20px' }}>Quantum Computing Talks</h1>\n            <div style={{\n                display: 'flex',\n                flexDirection: 'row',\n                justifyContent: 'space-evenly',\n                flexWrap: 'wrap'\n            }}>\n                {state.talks.talksList.map((talk, idx) => {\n                    if (talk.type === 'quantum')\n                        return <Tile key={idx} content={talk} buttonText='Watch Me!' width='25%'></Tile>\n                })}\n            </div>\n            <h1 style={{ textAlign: 'center', margin: '50px' }}>Other Talks</h1>\n            <div style={{\n                display: 'flex',\n                flexDirection: 'row',\n                justifyContent: 'space-evenly',\n                flexWrap: 'wrap'\n            }}>\n                {state.talks.talksList.map((talk, idx) => {\n                    if (talk.type != 'quantum')\n                        return <Tile key={idx} content={talk} buttonText='Watch Me!' width='25%'></Tile>\n                })}\n            </div>\n        </div>\n    )\n}","import * as actions from '../actions/applicationActions';\n\nexport const defaultState = {\n    mode: 'light',\n    tabOpen: 'about',\n    language: 'english',\n    modalOpen: false,\n    buttons: {\n        lightTitle: 'Light Mode',\n        darkTitle: 'Dark Mode',\n    },\n    about: {\n        title: null,\n        description: null,\n        heading: null,\n    },\n    talks: {\n        title: null,\n        talksList: [],\n    },\n    blogs: {\n        title: null,\n        blogsList: [],\n    },\n}\n\nexport default function applicationReducer(state, action) {\n    switch (action.type) {\n        case actions.setTheme: {\n            return {\n                ...state,\n                mode: action.theme\n            }\n        }\n        case actions.setTabOpen: {\n            return {\n                ...state,\n                tabOpen: action.tab\n            }\n        }\n        case actions.setLanguage: {\n            return {\n                ...state,\n                language: action.language\n            }\n        }\n        case actions.setAbout: {\n            return {\n                ...state,\n                about: action.data\n            }\n        }\n        case actions.setButtons: {\n            return {\n                ...state,\n                buttons: action.data\n            }\n        }\n        case actions.setTalks: {\n            return {\n                ...state,\n                talks: {\n                    title: 'Talks',\n                    talksList: action.data\n                }\n            }\n        }\n        case actions.setBlogs: {\n            return {\n                ...state,\n                blogs: {\n                    title: 'Articles',\n                    blogsList: action.data\n                }\n            }\n        }\n        default:\n            return state\n    }\n}\n","const axios = require('axios');\n\n// for running locally:\nconst baseURL = 'http://localhost:5000/';\n\n// for production:\n// const baseURL = 'https://javabster-portfolio-backend.herokuapp.com/';\n\nexport const getAboutMe = async (lang) => {\n    try {\n        const response = await axios({\n            method: 'get',\n            url: `${baseURL}api/aboutMe/${lang}`,\n        });\n        if (response.data) {\n            return response.data\n        }\n        return []\n    }\n    catch (err) {\n        console.log(err.message)\n    }\n}\n\nexport const getSkills = async (lang) => {\n    try {\n        const response = await axios({\n            method: 'get',\n            url: `${baseURL}api/skills/${lang}`,\n        });\n        if (response.data) {\n            return response.data\n        }\n        return []\n    }\n    catch (err) {\n        console.log(err.message)\n    }\n}\n\nexport const getLegend = async (lang) => {\n    try {\n        const response = await axios({\n            method: 'get',\n            url: `${baseURL}api/skills-legend/${lang}`\n        });\n        if (response.data) {\n            return response.data\n        }\n        return []\n    }\n    catch (err) {\n        console.log(err.message)\n    }\n}\n\nexport const getEducation = async (lang) => {\n    try {\n        const response = await axios({\n            method: 'get',\n            url: `${baseURL}api/education/${lang}`\n        });\n        if (response.data) {\n            return response.data\n        }\n        return []\n    }\n    catch (err) {\n        console.log(err.message)\n    }\n}\n\nexport const getWork = async (lang) => {\n    try {\n        const response = await axios({\n            method: 'get',\n            url: `${baseURL}api/work-exp/${lang}`\n        });\n        if (response.data) {\n            return response.data\n        }\n        return []\n    }\n    catch (err) {\n        console.log(err.message)\n    }\n}\n\nexport const getTalks = async () => {\n    try {\n        const response = await axios({\n            method: 'get',\n            url: `${baseURL}api/talks`\n        });\n        console.log(response)\n        if (response.data) {\n            return response.data\n        }\n        return []\n    }\n    catch (err) {\n        console.log(err.message)\n    }\n}\n\nexport const getData = async (type) => {\n    try {\n        const response = await axios({\n            method: 'get',\n            url: `${baseURL}api/${type}`\n        });\n        console.log(response)\n        if (response.data) {\n            return response.data\n        }\n        return []\n    }\n    catch (err) {\n        console.log(err.message)\n    }\n}\n\nexport const getButtonDetails = async (lang) => {\n    try {\n        const response = await axios({\n            method: 'get',\n            url: `${baseURL}api/buttons/${lang}`\n        });\n        if (response.data) {\n            return response.data\n        }\n        return []\n    }\n    catch (err) {\n        console.log(err.message)\n    }\n}\n\nexport const sendFeedback = async (feedback) => {\n    try {\n        const response = await axios({\n            method: 'post',\n            url: `${baseURL}api/feedback`,\n            data: feedback\n        });\n        if (response.data) {\n            return response.data\n        }\n        return []\n    }\n    catch (err) {\n        console.log(err.message)\n    }\n}\n","export const lightTheme = {\n  background: '#DFE4FB', //lilac\n  accent: '#45050C', //dark red\n  bodyMain: '#FFFFFF', //white\n  btnMain: '#8093F1', //purple\n  font: 'IBM Plex',\n  bar: '#DFE4FB', //lilac\n  innerBar: '#FF2E33', //bright red\n  bubble: '#45050C', //dark red\n  diamond: '#8093F1', //purple\n  timelineShadow: '#8093F1', //purple\n  tileBtn: '#2EBFA5' //green\n}\n\nexport const darkTheme = {\n  background: '#38023B', //dark purple\n  accent: '#DFE4FB', //lilac\n  bodyMain: '#8093F1', //purple\n  btnMain: '#8093F1', //purple\n  font: 'IBM Plex',\n  color: 'white',\n  bar: '#DFE4FB', //lilac\n  innerBar: '#38023B', //dark purple\n  bubble: '#FF2E33', //bright red\n  diamond: '#38023B', //lilac\n  timelineShadow: '#38023B', //darkpurple\n  tileBtn: '#2EBFA5' // green\n}","import React, { useEffect, createContext, useReducer, useState } from 'react';\nimport Wrapper from './Wrapper';\nimport MobileWrapper from './MobileWrapper';\nimport NavBar from '../nav-bar/NavBar';\nimport ThemeButtons from '../nav-bar/ThemeButtons';\n\nimport Body from '../body/Body';\nimport AboutBody from '../body/AboutBody'\nimport BlogsBody from '../body/BlogsBody';\nimport TalksBody from '../body/TalksBody';\n\nimport applicationReducer, { defaultState } from '../../reducers/applicationReducer';\nimport * as actions from '../../actions/applicationActions';\n\nimport { getButtonDetails, getData } from '../../utils/backendApi';\n\nimport '../../fonts/Aldrich/Aldrich-Regular.ttf'\nimport './App.css';\nimport { lightTheme, darkTheme } from '../../styles/themes';\nimport { ThemeProvider } from 'styled-components';\nimport { isMobileDevice } from '../../utils/utils';\n\nconst AppContext = createContext(null)\n\nfunction App() {\n  const [state, dispatch] = useReducer(applicationReducer, defaultState);\n  const [isMobile, setIsMobile] = useState();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const aboutRes = await getData('about');\n      dispatch(actions.setAbout(aboutRes));\n\n      const buttonRes = await getButtonDetails(state.language);\n      dispatch(actions.setButtons(buttonRes));\n\n      const talksRes = await getData('talks');\n      dispatch(actions.setTalks(talksRes));\n\n      const blogsRes = await getData('blogs');\n      dispatch(actions.setBlogs(blogsRes));\n    }\n    fetchData();\n    const mobile = isMobileDevice();\n    setIsMobile(mobile);\n  }, [state.language])\n\n  function setBody(type) {\n    switch (type) {\n      case 'about':\n        return <AboutBody />\n      case 'talks':\n        return <TalksBody />\n      case 'blogs':\n        return <BlogsBody />\n      default:\n        return <AboutBody />\n    }\n  }\n\n  return (\n    <AppContext.Provider value={{ state, dispatch }}>\n      <ThemeProvider theme={state.mode === 'light' ? lightTheme : darkTheme}>\n        {!isMobile\n          ?\n          <Wrapper>\n            <div>\n              <NavBar></NavBar>\n              {setBody(state.tabOpen)}\n              <div style={{ display: 'flex', flexDirection: 'row', marginTop: '10px' }}>\n                <ThemeButtons></ThemeButtons>\n              </div>\n            </div>\n          </Wrapper>\n          :\n          <MobileWrapper>\n            <div>\n              <NavBar></NavBar>\n              <Body mode='light'>{setBody(state.tabOpen)}</Body>\n              <div style={{ display: 'flex', flexDirection: 'row', marginTop: '10px', justifyContent: 'center' }}>\n                <ThemeButtons ></ThemeButtons>\n              </div>\n            </div>\n          </MobileWrapper>\n        }\n      </ThemeProvider>\n    </AppContext.Provider>\n  );\n}\n\nexport { AppContext, App };\n","export const isMobileDevice = () => {\n    return parseInt(document.body.clientWidth) <= 1024;\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\nimport './fonts/Aldrich/Aldrich-Regular.ttf'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}